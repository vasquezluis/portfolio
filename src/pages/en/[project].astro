---
import Layout from "@/layouts/Layout.astro"
import Container from "@/components/Container.astro"
import CheckList from "@/components/icons/CheckList.astro"
import { myFade } from "@/constants"
import type { Props } from "astro/components/ViewTransitions.astro"
import Lock from "@/components/icons/Lock.astro"
import Github from "@/components/icons/Github.astro"
import World from "@/components/icons/World.astro"
import { type Project } from "@/types"
import { TAGS } from "@/components/TagsList.astro"

import { getLangFromUrl, useTranslations, useTranslatedPath } from "@/i18n/utils"
const lang = getLangFromUrl(Astro.url)
const t = useTranslations(lang)
const translatePath = useTranslatedPath(lang)

const works = [
	{
		id: 1,
		imageUrl: "/images/dolce-compras.webp",
		url: "dolcecompras",
		title: {
			text: "DolceCompras",
			slug: "dolcecompras",
			color: "bg-gradient-to-r from-[#4fa2c8] via-[#9e93ab] to-[#d4816f] bg-clip-text",
		},
		tags: [TAGS.NEXTJS, TAGS.FIREBASE, TAGS.TYPESCRIPT],
		description: t("work1.desc"),
		type: {
			type: "private",
			colorType: "bg-teal-600 text-white",
		},
		date: t("work1.date"),
		functionalities: [
			{
				id: 1,
				title: t("work1.func.title1"),
				description: t("work1.func.desc1"),
			},
			{
				id: 2,
				title: t("work1.func.title2"),
				description: t("work1.func.desc2"),
			},
			{
				id: 3,
				title: t("work1.func.title3"),
				description: t("work1.func.desc3"),
			},
			{
				id: 4,
				title: t("work1.func.title4"),
				description: t("work1.func.desc4"),
			},
		],
	},
	{
		id: 2,
		imageUrl: "/images/ignition.webp",
		url: "ignition",
		title: {
			text: "Ignition",
			slug: "ignition",
			color: "bg-gradient-to-r from-[#fe4d3c] to-[#d80d91] bg-clip-text",
		},
		tags: [TAGS.REACTJS, TAGS.REDUX, TAGS.TAILWIND],
		description: t("work2.desc"),
		type: {
			type: "private",
			colorType: "bg-orange-600 text-white",
		},
		date: "Diciembre 2023",
		responsabilities: [
			{
				title: "Creación de frontend con Reactjs",
				description:
					"Creación de la parte gráfica de la aplicación utilizando Reactjs, manejo de estados utilizando Redux y RTQ. Los estilos de la aplicación se crearon utilizando Tailwincss",
				type: "Frontend",
			},
			{
				title: "Creación de lambdas de AWS",
				description:
					"Creación de lambdas en AWS para el manejo de las operaciones en base de datos y control de usuarios con AWS Cognito.",
				type: "Cloud",
			},
			{
				title: "Creación y mantenimiento de base de datos para mensajes y usuarios",
				description:
					"Creación y mantenimiento de base de datos donde se guardan las imágenes generados por los usuarios.",
				type: "Database",
			},
		],
		functionalities: [
			{
				id: 1,
				title: "Generación de imágenes",
				description: "Ignition genera imágenes utilizando Midjourney como base.",
			},
			{
				id: 2,
				title: "Generación de imágenes tropicalizadas",
				description:
					"Utilizando parámetros visuales, Ignition genera imágenes basados en la localización del usuario, sin crear imágenes de stock.",
			},
			{
				id: 3,
				title: "Generación de imágenes adaptadas",
				description:
					"Ignition genera imágenes adaptadas a marcas, por ejemplo generar cerveza de una marca en especifico.",
			},
		],
	},
	{
		id: 3,
		imageUrl: "/images/flamerly.webp",
		url: "flamerly",
		title: {
			text: "Flamerly",
			slug: "flamerly",
			color: "bg-gradient-to-r from-[#5a769b] to-[#697385] bg-clip-text",
		},
		tags: [TAGS.REACTJS, TAGS.DJANGO, TAGS.TAILWIND],
		description: t("work3.desc"),
		type: {
			type: "private",
			colorType: "bg-orange-600 text-white",
		},
		date: "Mayo 2023",
		responsabilities: [
			{
				title: "Creación de APIs con DJango",
				description:
					"Creación de endpoints para la generación de respuestas de los modelos de OpenAI al estilo de ChatGPT.",
				type: "Backend",
			},
			{
				title: "Creación de frontend con Reactjs",
				description:
					"Creación de la parte gráfica de la aplicación utilizando Reactjs, manejo de estados utilizando Redux y RTQ. Los estilos de la aplicación se crearon utilizando Tailwincss",
				type: "Frontend",
			},
			{
				title: "Creación de chatbot utilizando OpenAI",
				description:
					"Creación de un chatbot utilizando los modelos de OpenAI (chat completions) y crear respuestas basadas en archivos privados de la empresa.",
				type: "IA",
			},
			{
				title: "Creación de lambdas de AWS",
				description:
					"Creación de lambdas en AWS para el manejo de las operaciones en base de datos y control de usuarios con AWS Cognito.",
				type: "Cloud",
			},
			{
				title: "Creación y mantenimiento de base de datos para mensajes y usuarios",
				description:
					"Creación y mantenimiento de base de datos donde se guardan los mensajes generados por los usuarios.",
				type: "Database",
			},
		],
		functionalities: [
			{
				id: 1,
				title: "Chatbot",
				description: "Flamerly puede responder preguntas generales.",
			},
			{
				id: 2,
				title: "Chatbot empresarial",
				description:
					"Flamerly está entrenado para responder preguntas específicas con información privada.",
			},
		],
	},
	{
		id: 4,
		imageUrl: "/images/duagt.webp",
		url: "escuela-duagt",
		title: {
			text: "Escuela virtual DUAGT",
			slug: "escuela-duagt",
			color: "bg-gradient-to-r from-[#6cd69f] via-[#bdb19d] to-[#dc7998] bg-clip-text",
		},
		tags: [TAGS.MOODLE, TAGS.MYSQL],
		description: t("work4.desc"),
		type: {
			type: "private",
			colorType: "bg-teal-600 white",
		},
		date: "Enero 2024",
		functionalities: [
			{
				id: 1,
				title: "Control de estudiantes",
				description:
					"El proyecto permite un control de estudiantes y inscripción a diferentes cursos.",
			},
			{
				id: 2,
				title: "Control de maestros",
				description:
					"El proyecto permite el control de maestros y su generación de contenido para diferentes cursos.",
			},
			{
				id: 3,
				title: "Generación de reportes",
				description:
					"El proyecto permite generar reportes de estudiantes, maestros, notas, rendimiento de estudiantes y rendimiento de la aplicación.",
			},
		],
	},
]

const projects = [
	{
		id: 1,
		imageUrl: "/images/structura.webp",
		url: "structura",
		title: {
			text: "Structura",
			slug: "structura",
			color: "bg-gradient-to-r from-[#72746a] to-[#636363] bg-clip-text",
		},
		tags: [TAGS.NEXTJS, TAGS.AISDK, TAGS.TYPESCRIPT],
		description: t("proj1.desc"),
		type: {
			type: "open",
			repo: "https://github.com/vasquezluis/structura",
			url: "https://structura-hackathon.vercel.app/",
			colorType: "bg-orange-600 text-white",
		},
		date: "Julio 2024",
		functionalities: [
			{
				id: 1,
				title: "Lenguaje natural",
				description:
					"Structura puede comprender el lenguaje natural para la generación de contenido utilizando el modelo gpt3.5 de OpenAI.",
			},
			{
				id: 2,
				title: "Generación de estructuras SQL",
				description:
					"Structura genera contenido SQL basado en la descripción del proyecto del usuario. Structura solo necesita el contexto del proyecto para generar una estructura inicial.",
			},
			{
				id: 3,
				title: "Generación código SQL",
				description:
					"Structura genera código SQL basado en la descripción del proyecto del usuario.",
			},
			{
				id: 4,
				title: "Generación descripción",
				description:
					"Structura una descripción del código SQL generado, ayudando al usuario a entender el contenido.",
			},
			{
				id: 5,
				title: "Generación mapa mental",
				description:
					"Structura genera un mapa mental sobre el código generado para ayudar al usuario a entender el código generado.",
			},
		],
	},
	{
		id: 2,
		imageUrl: "/images/tic-tac-toe.webp",
		url: "tic-tac-toe",
		title: {
			text: "Tic-Tac-Toe",
			slug: "tic-tac-toe",
			color: "bg-gradient-to-r from-[#257441] to-[#195d75] bg-clip-text",
		},
		tags: [TAGS.REACTJS, TAGS.SOCKETIO, TAGS.ZUSTAND],
		description: t("proj2.desc"),
		type: {
			type: "open",
			repo: "https://github.com/vasquezluis/tic-tac-toe-client",
			// url: "https://structura-hackathon.vercel.app/",
			colorType: "bg-orange-600 text-white",
		},
		date: "Septiembre 2024",
		functionalities: [
			{
				id: 1,
				title: "Multijugador",
				description:
					"Este juego tiene la capacidad de manejar dos jugadores para jugar tic-tac-toe",
			},
			{
				id: 2,
				title: "Tiempo real",
				description:
					"Este proyecto tiene la capacidad de manejar los datos en tiempo real de los jugadores en la partida. Sin tener que recargar la página para obtener cambios.",
			},
			{
				id: 3,
				title: "Salas",
				description:
					"El proyecto tiene la capacidad de manejar diferentes salas, con un máximo de 2 jugadores. Los jugadores pueden crear salas o unirse a salas con un código.",
			},
		],
	},
]

const { project } = Astro.params

let info: Project

info = works.find((p) => p.title.slug === project) as Project

if (!info) {
	info = projects.find((p) => p.title.slug === project) as Project

	if (!info) {
		return Astro.redirect(translatePath("/en/404", lang))
	}
}
---

<Layout title={`${info.title.text}`} description={`Pagina del proyecto ${info.title.text}`}>
	<Container>
		<main class="mt-8 flex w-full flex-col items-center justify-center gap-8">
			<picture class="flex w-full items-center justify-center">
				<img
					transition:name={info.title.slug}
					transition:animate={myFade}
					class="aspect-auto h-full w-full max-w-full rounded-lg object-cover"
					src={info.imageUrl}
					alt={`Portada de ${info.title.text}`}
				/>
			</picture>

			<section class="flex w-full flex-col items-start justify-center gap-y-3">
				<div
					class="flex flex-col items-start justify-center gap-y-2 md:flex-row md:items-center md:gap-x-2 md:gap-y-0"
				>
					<span class="h-full text-neutral-500">{info.date}</span>
					<ul class="flex flex-wrap gap-x-2">
						{
							info.tags.map((tag) => (
								<li>
									<span
										class:list={`flex gap-x-2 rounded-full text-sm ${tag.class} items-center justify-center px-2 py-1`}
									>
										<tag.icon class="size-6" />
										{tag.label}
									</span>
								</li>
							))
						}
					</ul>
				</div>
				<div>
					{
						info.type.type === "private" ? (
							<span class="flex items-center justify-center gap-x-1 text-neutral-400">
								{t("proj.type")} <Lock class="size-6" />
							</span>
						) : (
							<div class="flex items-center justify-center gap-x-2">
								<a
									href={info.type.repo}
									target="_blank"
									rel="noopener noreferrer"
									class="flex items-center justify-center gap-x-2 rounded-md px-2 py-1 text-neutral-300 hover:bg-white/5 hover:ring-1 hover:ring-white/30
								"
								>
									Code <Github class="size-6" />
								</a>
								{info.type.url && (
									<a
										href={info.type.url}
										target="_blank"
										rel="noopener noreferrer"
										class="flex items-center justify-center gap-x-2 rounded-md px-2 py-1 text-neutral-300 hover:bg-white/5 hover:ring-1 hover:ring-white/30
								"
									>
										Link <World class="size-6" />
									</a>
								)}
							</div>
						)
					}
				</div>
			</section>

			<section class="w-full">
				<h1 class="mb-4 text-5xl font-bold text-neutral-100">{info.title.text}</h1>
				<p class="text-neutral-300">{info.description}</p>
			</section>

			{
				info.functionalities !== undefined && (
					<section class="w-full pl-4 pr-1 md:px-0">
						<h3 class="mb-5 text-2xl font-semibold text-neutral-100">{t("proj.func")}</h3>
						<ol class="relative border-s border-gray-700">
							{info.functionalities.map(({ title, description }) => (
								<li class="mb-10 ms-6">
									<span class="absolute -start-3 flex h-6 w-6 items-center justify-center rounded-full bg-neutral-600 ring-8 ring-neutral-800">
										<CheckList class="h-5 w-5" />
									</span>
									<h3 class="mb-1 flex items-center text-lg font-semibold text-neutral-200">
										{title}
									</h3>
									<p class="mb-4 text-base font-normal text-gray-500 dark:text-gray-400">
										{description}
									</p>
								</li>
							))}
						</ol>
					</section>
				)
			}

			{
				info.responsabilities !== undefined && (
					<section class="w-full pl-4 pr-1 md:px-0">
						<h3 class="mb-5 text-2xl font-semibold text-neutral-100">{t("proj.resp")}</h3>
						<ol class="relative border-s border-gray-700">
							{info.responsabilities.map(({ title, description, type }) => (
								<li class="mb-10 ms-6">
									<span class="absolute -start-3 flex h-6 w-6 items-center justify-center rounded-full bg-neutral-600 ring-8 ring-neutral-800">
										<CheckList class="h-5 w-5" />
									</span>
									<h3 class="mb-1 flex items-center text-lg font-semibold text-neutral-200">
										{title}
										<span class="me-2 ms-3 rounded bg-neutral-600 px-2.5 py-0.5 text-sm font-medium text-neutral-300 backdrop-blur">
											{type}
										</span>
									</h3>
									<p class="mb-4 text-base font-normal text-gray-500 dark:text-gray-400">
										{description}
									</p>
								</li>
							))}
						</ol>
					</section>
				)
			}
		</main>
	</Container>
</Layout>
